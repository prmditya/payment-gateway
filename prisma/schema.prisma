// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String? // For credentials login
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Custom Models for Payment Gateway
model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Stripe data
  stripeCustomerId     String
  stripeSubscriptionId String?  @unique
  stripePriceId        String
  stripeProductId      String?

  // Subscription details
  status               String   // active, canceled, past_due, incomplete, trialing
  planName             String   // Basic, Pro, Enterprise
  amount               Int      // Amount in cents
  currency             String   @default("usd")
  interval             String   // month, year

  // Dates
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean  @default(false)
  canceledAt           DateTime?

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
  @@index([stripeCustomerId])
}

model Payment {
  id                 String   @id @default(cuid())
  userId             String

  // Stripe data
  stripeInvoiceId    String   @unique
  stripeSubscriptionId String?

  // Payment details
  amount             Int      // Amount in cents
  currency           String   @default("usd")
  status             String   // paid, failed, pending

  // Dates
  paidAt             DateTime?
  createdAt          DateTime @default(now())

  @@index([userId])
}
